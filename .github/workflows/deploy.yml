name: Deploy Flink Application

# 核心触发器：监听来自外部仓库的 dispatch 事件
on:
  repository_dispatch:
    # 只响应事件类型为 'flink-deploy' 的触发
    types: [flink-deploy]

jobs:
  #====================================================
  #==             部署到开发环境 (Dev)             ==
  #==         一个 Job 完成所有自动化操作            ==
  #====================================================
  deploy-dev:
    # 条件：仅当触发事件中的环境字段为 'dev' 时运行
    if: github.event.client_payload.environment == 'dev'
    runs-on: ubuntu-latest
    environment: dev # 关联到名为 'dev' 的 GitHub Environment
    permissions:
      id-token: write   # OIDC 权限
      contents: read    # 拉取代码权限

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEV_AWS_ROLE_ARN }} # 使用 Dev 环境的 IAM Role
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init, Validate & Fmt
        run: |
          terraform init
          terraform validate
          terraform fmt -check

      - name: Terraform Plan & Apply (Dev)
        run: |
          # 在 Dev 环境，直接 Plan 并自动 Apply
          terraform plan -var="flink_image_uri=${{ github.event.client_payload.image_uri }}"
          terraform apply -var="flink_image_uri=${{ github.event.client_payload.image_uri }}" -auto-approve

  #====================================================
  #==         生产环境部署第一步：规划 (Plan)        ==
  #==   生成计划并将其作为“密封的蓝图”上传          ==
  #====================================================
  plan-prod:
    if: github.event.client_payload.environment == 'prod'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      tf_plan_artifact_name: ${{ steps.upload-artifact.outputs.artifact-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_AWS_ROLE_ARN }} # 使用 Prod 环境的 IAM Role
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init, Validate & Fmt
        run: |
          terraform init
          terraform validate
          terraform fmt -check

      - name: Terraform Plan (Prod)
        run: |
          # 关键：生成计划并将其保存到文件 tfplan 中
          terraform plan -var="flink_image_uri=${{ github.event.client_payload.image_uri }}" -out=tfplan

      - name: Upload Plan Artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          # 将 tfplan 文件上传为一个工件 (artifact)
          # 命名中包含 commit SHA，确保其唯一性
          name: prod-tfplan-${{ github.event.client_payload.sha }}
          path: tfplan

  #====================================================
  #==      生产环境部署第二步：审批与应用 (Apply)    ==
  #==     下载“密封的蓝图”，等待审批，然后执行       ==
  #====================================================
  apply-prod:
    # 依赖：必须等待 plan-prod 作业成功完成
    needs: plan-prod
    if: github.event.client_payload.environment == 'prod'
    runs-on: ubuntu-latest
    
    # 关键：关联到 Prod 环境，触发手动审批规则
    environment:
      name: prod
      url: '[https://console.aws.amazon.com/kinesisanalytics/home](https://console.aws.amazon.com/kinesisanalytics/home)' # (可选) 生产环境 Flink 控制台 URL

    # 并发控制：确保同一时间只有一个生产部署在进行
    concurrency:
      group: prod-deployment
      cancel-in-progress: false

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          # 下载由 plan-prod 作业上传的、精确匹配的“蓝图”
          name: ${{ needs.plan-prod.outputs.tf_plan_artifact_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        
      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply (Prod)
        run: |
          # 关键：直接应用下载的 tfplan 文件
          # 这确保了执行的变更与规划阶段看到的完全一致
          terraform apply -input=false tfplan